{"version":3,"file":"static/js/165.e2025522.chunk.js","mappings":"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","sources":["webpack://react-project1/./src/components/Dialogs/Dialogs.module.css?1b2e","webpack://react-project1/./src/components/Dialogs/DialogItem/DialogItem.module.css?beb9","components/Dialogs/DialogItem/DialogItem.jsx","webpack://react-project1/./src/components/Dialogs/Message/Message.module.css?72d0","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx","webpack://react-project1/./src/components/common/FormsControls/FormControls.module.css?2a3b","components/common/FormsControls/FormsControls.js","utils/validators/validators.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__1ygqK\",\"dialogsItems\":\"Dialogs_dialogsItems__hTchz\",\"active\":\"Dialogs_active__Qzab1\",\"messages\":\"Dialogs_messages__J3dhd\",\"submitMessage\":\"Dialogs_submitMessage__a1iLC\"};","// extracted by mini-css-extract-plugin\nexport default {\"dialog\":\"DialogItem_dialog__unEgL\"};","import { NavLink } from 'react-router-dom';\r\nimport s from './DialogItem.module.css'\r\n\r\nconst DialogItem = (props) => {\r\n    return (\r\n        <div className={s.dialog}>\r\n            <NavLink to={'/dialogs/' + props.id}>{props.name}</NavLink>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DialogItem;","// extracted by mini-css-extract-plugin\nexport default {\"message\":\"Message_message__kD4Z-\"};","import s from './Message.module.css'\r\n\r\nconst Message = (props) => {\r\n    return <div className={s.message}><p>{props.message}</p></div>\r\n};\r\n\r\nexport default Message;","import s from './Dialogs.module.css'\r\nimport DialogItem from './DialogItem/DialogItem';\r\nimport Message from './Message/Message';\r\nimport React from 'react';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { maxLenghtCreator, required } from '../../utils/validators/validators';\r\nimport { Textarea } from '../common/FormsControls/FormsControls';\r\n\r\nconst Dialogs = (props) => {\r\n    let state = props.dialogsPage;\r\n\r\n    let dialogsElememts = state.dialogs.map(d => <DialogItem name={d.name} key={d.id} id={d.id} />)\r\n    let messagesElements = state.messages.map(m => <Message message={m.message} key={m.id} />)\r\n\r\n    let addNewMessage = (values) => {\r\n        props.sendMessage(values.newMessageBody);\r\n    }\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElememts}\r\n            </div>\r\n            <div className={s.messages}>\r\n                {messagesElements}\r\n                <AddMessageFormRedux onSubmit={addNewMessage} />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst maxLenght50 = maxLenghtCreator(50);\r\n\r\nconst AddMessageForm = (props) => {\r\n return (\r\n    <form onSubmit={props.handleSubmit} className={s.submitMessage}>\r\n    <Field component={Textarea} name={'newMessageBody'} placeholder={'Enter your message'} rows={'2'} cols={'60'} wrap={'hard'} validate={ [required, maxLenght50] }></Field>\r\n    <button>Submit</button>\r\n</form>\r\n    )\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm({form: 'dialogAddMessageForm'})(AddMessageForm)\r\n\r\n\r\nexport default Dialogs;","import { sendMessage} from '../../redux/dialogs-reducer';\r\nimport Dialogs from './Dialogs';\r\nimport { connect } from 'react-redux';\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect';\r\nimport { compose } from 'redux';\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        sendMessage: (newMessageBody) => {\r\n            dispatch(sendMessage(newMessageBody));\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs)\r\n","// extracted by mini-css-extract-plugin\nexport default {\"error\":\"FormControls_error__LSc-N\",\"errorTextTextArea\":\"FormControls_errorTextTextArea__8fq9b\",\"formControlInput\":\"FormControls_formControlInput__JrK2p\",\"errorTextInput\":\"FormControls_errorTextInput__+PqcS\"};","import React from \"react\"\r\nimport s from './FormControls.module.css'\r\n\r\nexport const Textarea = ({input, meta, ...props}) => {\r\n\r\n    const hasError = meta.touched && meta.error\r\n    return  (\r\n        <div className={`${s.formControlTextArea} ${hasError? s.error :  ''}`} >\r\n            <textarea {...input} {...props} />\r\n        {hasError && <div className={s.errorTextTextArea}>{meta.error}</div>}\r\n        </div>\r\n        )\r\n}\r\n\r\nexport const Input = ({input, meta, ...props}) => {\r\n\r\n    const hasError = meta.touched && meta.error\r\n    return  (\r\n        <div className={`${s.formControlInput} ${hasError? s.error :  ''}`} >\r\n            <input {...input} {...props} />\r\n        {hasError && <div className={s.errorTextInput}>{meta.error}</div>}\r\n        </div>\r\n        )\r\n}","export const required = (value) => {\r\n    if (value) return undefined;\r\n    return 'Field is required'\r\n}\r\n\r\nexport const maxLenghtCreator = (maxLenght) => (value) => {\r\n if (value.length > maxLenght) return `Max Lenght is ${maxLenght} symbols`\r\n return undefined\r\n}"],"names":["props","_jsx","className","s","children","NavLink","to","id","name","message","maxLenght50","maxLenghtCreator","AddMessageFormRedux","reduxForm","form","_jsxs","onSubmit","handleSubmit","Field","component","Textarea","placeholder","rows","cols","wrap","validate","required","state","dialogsPage","dialogsElememts","dialogs","map","d","DialogItem","messagesElements","messages","m","Message","values","sendMessage","newMessageBody","compose","connect","dispatch","withAuthRedirect","Dialogs","_ref","input","meta","hasError","touched","error","concat","formControlTextArea","errorTextTextArea","Input","_ref2","formControlInput","errorTextInput","value","maxLenght","length"],"sourceRoot":""}